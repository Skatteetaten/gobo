scalar DateTime
scalar URL

type Query {
    affiliations(name: String, checkForVisibility: Boolean): AffiliationsConnection
    applications(affiliations: [String!]!, applications: [String!]): ApplicationsConnection
    applicationDeployment(id: String!): ApplicationDeployment
    applicationDeploymentDetails(id: String!): ApplicationDeploymentDetails
    imageRepositories(repositories: [String!]!): [ImageRepository!]
    currentUser: User
    scan(host: String!, port: Int = 80): Scan
    userSettings: UserSettings
    databaseSchemas(affiliations: [String!]!): [DatabaseSchema!]
    databaseSchema(id: String!): DatabaseSchema
    restorableDatabaseSchemas(affiliations: [String!]!): [RestorableDatabaseSchema!]
    databaseInstances(affiliation: String): [DatabaseInstance]
    gobo: Gobo
    certificates: CertificatesConnection
    auroraApiMetadata: AuroraApiMetadata
    auroraConfig(name:String!, ref:String): AuroraConfig
    route(namespace: String!, name: String!): Route
}

type Mutation {
    deploy(input: ApplicationDeploymentInput!): ApplicationDeploymentResult
    redeployWithVersion(input: ApplicationDeploymentVersionInput!): Boolean
    redeployWithCurrentVersion(input: ApplicationDeploymentIdInput!): Boolean

    refreshApplicationDeployment(input: RefreshByApplicationDeploymentIdInput!): Boolean
    refreshApplicationDeployments(input: RefreshByAffiliationsInput!): Boolean
    deleteApplicationDeployment(input: DeleteApplicationDeploymentInput!): Boolean

    updateUserSettings(input: UserSettingsInput!): Boolean

    updateDatabaseSchema(input: UpdateDatabaseSchemaInput!): DatabaseSchema
    deleteDatabaseSchemas(input: DeleteDatabaseSchemasInput!): ChangeCooldownDatabaseSchemasResponse
    restoreDatabaseSchemas(input: RestoreDatabaseSchemasInput!): ChangeCooldownDatabaseSchemasResponse

    testJdbcConnectionForJdbcUser(input: JdbcUserInput!): ConnectionVerificationResponse
    testJdbcConnectionForId(id: String!): ConnectionVerificationResponse

    createDatabaseSchema(input: CreateDatabaseSchemaInput): DatabaseSchema

    createAuroraConfigFile(input: NewAuroraConfigFileInput) : AuroraConfigFileValidationResponse
    updateAuroraConfigFile(input: UpdateAuroraConfigFileInput) : AuroraConfigFileValidationResponse

}

type PageInfo {
    startCursor: String
    endCursor: String
    hasPreviousPage: Boolean
    hasNextPage: Boolean
}
