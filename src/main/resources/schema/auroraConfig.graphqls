type AuroraConfig{
    name: String!
    ref: String!
    resolvedRef: String!
    files(types:[AuroraConfigFileType!], fileName:[String!]): [AuroraConfigFile!]
}

input NewAuroraConfigFileInput {
    auroraConfigName: String!,
    auroraConfigReference:String,
    fileName:String!,
    contents:String!
}

input UpdateAuroraConfigFileInput {
    auroraConfigName: String!,
    auroraConfigReference:String,
    fileName:String!,
    contents:String!,
    existingHash:String!
}



type AuroraConfigFile {
    name: String!
    type: AuroraConfigFileType!
    contents: String!
    contentHash: String!
}

enum AuroraConfigFileType  {
    GLOBAL,
    BASE,
    ENV,
    APP
}

type AuroraConfigFileValidationResponse {
    message: String!
    success: Boolean!
    errors: [AuroraConfigValidationError!]
    file: AuroraConfigFile
}

type AuroraConfigValidationError {
    application: String!
    environment: String!
    details: [AuroraConfigValidationErrorDetail!]
    type: String
}

type AuroraConfigValidationErrorDetail {
    type: ErrorType!
    message: String!
    field: AuroraConfigFieldError
}

type AuroraConfigFieldError {
    path: String!
    fileName: String
    value: String
}

enum  ErrorType {
ILLEGAL,
MISSING,
INVALID,
GENERIC,
WARNING
}
